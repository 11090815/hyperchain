// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: test.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Plaintext  []byte `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Reply) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *Reply) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plaintext  []byte `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	Ciphertext []byte `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *Request) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x45, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x47, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x32, 0xe4, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a,
	0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x07,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x44, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39,
	0x30, 0x38, 0x31, 0x35, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_test_proto_goTypes = []interface{}{
	(*Reply)(nil),   // 0: protobuf.Reply
	(*Request)(nil), // 1: protobuf.Request
}
var file_test_proto_depIdxs = []int32{
	1, // 0: protobuf.EncryptorDecryptor.Encrypt:input_type -> protobuf.Request
	1, // 1: protobuf.EncryptorDecryptor.Decrypt:input_type -> protobuf.Request
	1, // 2: protobuf.EncryptorDecryptor.EncryptStream:input_type -> protobuf.Request
	1, // 3: protobuf.EncryptorDecryptor.DecryptStream:input_type -> protobuf.Request
	0, // 4: protobuf.EncryptorDecryptor.Encrypt:output_type -> protobuf.Reply
	0, // 5: protobuf.EncryptorDecryptor.Decrypt:output_type -> protobuf.Reply
	0, // 6: protobuf.EncryptorDecryptor.EncryptStream:output_type -> protobuf.Reply
	0, // 7: protobuf.EncryptorDecryptor.DecryptStream:output_type -> protobuf.Reply
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EncryptorDecryptorClient is the client API for EncryptorDecryptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EncryptorDecryptorClient interface {
	Encrypt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Decrypt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	EncryptStream(ctx context.Context, opts ...grpc.CallOption) (EncryptorDecryptor_EncryptStreamClient, error)
	DecryptStream(ctx context.Context, opts ...grpc.CallOption) (EncryptorDecryptor_DecryptStreamClient, error)
}

type encryptorDecryptorClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptorDecryptorClient(cc grpc.ClientConnInterface) EncryptorDecryptorClient {
	return &encryptorDecryptorClient{cc}
}

func (c *encryptorDecryptorClient) Encrypt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/protobuf.EncryptorDecryptor/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptorDecryptorClient) Decrypt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/protobuf.EncryptorDecryptor/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptorDecryptorClient) EncryptStream(ctx context.Context, opts ...grpc.CallOption) (EncryptorDecryptor_EncryptStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EncryptorDecryptor_serviceDesc.Streams[0], "/protobuf.EncryptorDecryptor/EncryptStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &encryptorDecryptorEncryptStreamClient{stream}
	return x, nil
}

type EncryptorDecryptor_EncryptStreamClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type encryptorDecryptorEncryptStreamClient struct {
	grpc.ClientStream
}

func (x *encryptorDecryptorEncryptStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *encryptorDecryptorEncryptStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *encryptorDecryptorClient) DecryptStream(ctx context.Context, opts ...grpc.CallOption) (EncryptorDecryptor_DecryptStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EncryptorDecryptor_serviceDesc.Streams[1], "/protobuf.EncryptorDecryptor/DecryptStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &encryptorDecryptorDecryptStreamClient{stream}
	return x, nil
}

type EncryptorDecryptor_DecryptStreamClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type encryptorDecryptorDecryptStreamClient struct {
	grpc.ClientStream
}

func (x *encryptorDecryptorDecryptStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *encryptorDecryptorDecryptStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EncryptorDecryptorServer is the server API for EncryptorDecryptor service.
type EncryptorDecryptorServer interface {
	Encrypt(context.Context, *Request) (*Reply, error)
	Decrypt(context.Context, *Request) (*Reply, error)
	EncryptStream(EncryptorDecryptor_EncryptStreamServer) error
	DecryptStream(EncryptorDecryptor_DecryptStreamServer) error
}

// UnimplementedEncryptorDecryptorServer can be embedded to have forward compatible implementations.
type UnimplementedEncryptorDecryptorServer struct {
}

func (*UnimplementedEncryptorDecryptorServer) Encrypt(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedEncryptorDecryptorServer) Decrypt(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (*UnimplementedEncryptorDecryptorServer) EncryptStream(EncryptorDecryptor_EncryptStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EncryptStream not implemented")
}
func (*UnimplementedEncryptorDecryptorServer) DecryptStream(EncryptorDecryptor_DecryptStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DecryptStream not implemented")
}

func RegisterEncryptorDecryptorServer(s *grpc.Server, srv EncryptorDecryptorServer) {
	s.RegisterService(&_EncryptorDecryptor_serviceDesc, srv)
}

func _EncryptorDecryptor_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptorDecryptorServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.EncryptorDecryptor/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptorDecryptorServer).Encrypt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptorDecryptor_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptorDecryptorServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.EncryptorDecryptor/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptorDecryptorServer).Decrypt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptorDecryptor_EncryptStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EncryptorDecryptorServer).EncryptStream(&encryptorDecryptorEncryptStreamServer{stream})
}

type EncryptorDecryptor_EncryptStreamServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type encryptorDecryptorEncryptStreamServer struct {
	grpc.ServerStream
}

func (x *encryptorDecryptorEncryptStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *encryptorDecryptorEncryptStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EncryptorDecryptor_DecryptStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EncryptorDecryptorServer).DecryptStream(&encryptorDecryptorDecryptStreamServer{stream})
}

type EncryptorDecryptor_DecryptStreamServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type encryptorDecryptorDecryptStreamServer struct {
	grpc.ServerStream
}

func (x *encryptorDecryptorDecryptStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *encryptorDecryptorDecryptStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EncryptorDecryptor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.EncryptorDecryptor",
	HandlerType: (*EncryptorDecryptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _EncryptorDecryptor_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _EncryptorDecryptor_Decrypt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EncryptStream",
			Handler:       _EncryptorDecryptor_EncryptStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DecryptStream",
			Handler:       _EncryptorDecryptor_DecryptStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
