syntax = "proto3";

option go_package = "github.com/11090815/hyperchain/protos-go/msp";

package msp;

// MSPConfig collects all the configuration information for
// an MSP. The Config field should be unmarshalled in a way
// that depends on the Type
message MSPConfig {
    // Config HyperchainMSPConfig 结构体的 protobuf 编码的字节。
    bytes config = 1;
}

// HyperchainMSPConfig collects all the configuration information for
// a Hyperchain MSP.
// Here we assume a default certificate validation policy, where
// any certificate signed by any of the listed rootCA certs would
// be considered as valid under this MSP.
// This MSP may or may not come with a signing identity. If it does,
// it can also issue signing identities. If it does not, it can only
// be used to validate and verify certificates.
message HyperchainMSPConfig {
    // Name holds the identifier of the MSP; MSP identifier
    // is chosen by the application that governs this MSP.
    // For example, and assuming the default implementation of MSP,
    // that is X.509-based and considers a single Issuer,
    // this can refer to the Subject OU field or the Issuer OU field.
    string name = 1;

    // RootCerts 存储本 msp 信任的 ca 证书的证书列表，存储格式为 ASN.1 DER PEM。
    repeated bytes root_certs = 2;

    // IntermediateCerts 存储该 MSP 信任的中间证书列表；它们在证书验证时的使用方法如下：
    // 验证尝试从待验证证书（位于路径的一端）和根证书字段中的一个证书（位于路径的另一端）
    // 之间建立一条路径。如果路径长于 2，中间的证书将在 IntermediateCerts 池中搜索。
    repeated bytes intermediate_certs = 3;

    // Admins 表示该 MSP 的管理员的身份。
    // x509 证书的 ASN.1 DER PEM 格式编码的数据。
    repeated bytes admins = 4;

    // RevocationList 证书撤销列表。
    // x509 证书的 ASN.1 DER PEM 格式编码的数据。
    repeated bytes revocation_list = 5;

    // SigningIdentity holds information on the signing identity
    // this peer is to use, and which is to be imported by the
    // MSP defined before
    SigningIdentityInfo signing_identity = 6;

    // OrganizationalUnitIdentifiers holds one or more
    // hyperchain organizational unit identifiers that belong to
    // this MSP configuration
    repeated HyperchainOUIdentifier organizational_unit_identifiers = 7;

    // HyperchainCryptoConfig 定义了采用那种哈希算法。
    HyperchainCryptoConfig crypto_config = 8;

    // TlsRootCerts 该 MSP 信任的 TLS 根证书列表，x509 证书的 ASN.1 DER PEM 格式编码的数据。
    repeated bytes tls_root_certs = 9;

    // TlsIntermediateCerts 该 MSP 信任的 TLS 中级证书列表，x509 证书的 ASN.1 DER PEM 格式编码的数据。
    repeated bytes tls_intermediate_certs = 10;

    // HyperchainNodeOus 包含 peer、admin、client、orderer 四类节点的 organizational unit 的配置信息。
    HyperchainNodeOUs hyperchain_node_ous = 11;
}

// HyperchainCryptoConfig contains configuration parameters
// for the cryptographic algorithms used by the MSP
// this configuration refers to
message HyperchainCryptoConfig {

    // HashAlgorithm 定义了哈希算法，目前仅支持 SHA256 哈希算法。
    // 用于计算签名 (signature) 和身份标识符 (identity identifier) 时使用。
    string hash_algorithm = 1;
}

// IdemixMSPConfig collects all the configuration information for
// an Idemix MSP.
message IdemixMSPConfig {
    // Name holds the identifier of the MSP
    string name = 1;

    // ipk represents the (serialized) issuer public key
    bytes ipk = 2;

    // signer may contain crypto material to configure a default signer
    IdemixMSPSignerConfig signer = 3;

    // revocation_pk is the public key used for revocation of credentials
    bytes revocation_pk = 4;

    // epoch represents the current epoch (time interval) used for revocation
    int64 epoch = 5;
}

// IdemixMSPSIgnerConfig contains the crypto material to set up an idemix signing identity
message IdemixMSPSignerConfig {
    // cred represents the serialized idemix credential of the default signer
    bytes cred = 1;

    // sk is the secret key of the default signer, corresponding to credential Cred
    bytes sk = 2;

    // organizational_unit_identifier defines the organizational unit the default signer is in
    string organizational_unit_identifier = 3;

    // role defines whether the default signer is admin, peer, member or client
    int32 role = 4;

    // enrollment_id contains the enrollment id of this signer
    string enrollment_id = 5;

    // credential_revocation_information contains a serialized CredentialRevocationInformation
    bytes credential_revocation_information = 6;
}

// SigningIdentityInfo represents the configuration information
// related to the signing identity the peer is to use for generating
// endorsements
message SigningIdentityInfo {
    // PublicSigner x509 证书的 ASN.1 DER PEM 格式编码的数据。
    bytes public_signer = 1;

    // PrivateSigner 与 PublicSigner 相对应的私钥信息，当根据 PublicSigner 的公钥的 SKI 在 keystore
    // 中找不到私钥时，就可以利用 PrivateSigner 携带的私钥信息导入私钥到 keystore 中。
    KeyInfo private_signer = 2;
}

// KeyInfo represents a (secret) key that is either already stored
// in the bccsp/keystore or key material to be imported to the
// bccsp key-store. In later versions it may contain also a
// keystore identifier
message KeyInfo {
    // Identifier of the key inside the default keystore; this for
    // the case of Software BCCSP as well as the HSM BCCSP would be
    // the SKI of the key
    string key_identifier = 1;

    // KeyMaterial 密钥的 ASN.1 DER PEM 格式数据。
    bytes key_material = 2;
}

// HyperchainOUIdentifier represents an organizational unit and
// its related chain of trust identifier.
message HyperchainOUIdentifier {

    // Certificate represents the second certificate in a certification chain.
    // (Notice that the first certificate in a certification chain is supposed
    // to be the certificate of an identity).
    // It must correspond to the certificate of root or intermediate CA
    // recognized by the MSP this message belongs to.
    // Starting from this certificate, a certification chain is computed
    // and bound to the OrganizationUnitIdentifier specified
    bytes certificate = 1;

    // OrganizationUnitIdentifier defines the organizational unit under the
    // MSP identified with MSPIdentifier
    string organizational_unit_identifier = 2;
}

// HyperchainNodeOUs contains configuration to tell apart clients from peers from orderers
// based on OUs. If NodeOUs recognition is enabled then an msp identity
// that does not contain any of the specified OU will be considered invalid.
message HyperchainNodeOUs {
    // If true then an msp identity that does not contain any of the specified OU will be considered invalid.
    bool   enable = 1;

    // OU Identifier of the clients
    HyperchainOUIdentifier client_ou_identifier = 2;

    // OU Identifier of the peers
    HyperchainOUIdentifier peer_ou_identifier = 3;

    // OU Identifier of the admins
    HyperchainOUIdentifier admin_ou_identifier = 4;

    // OU Identifier of the orderers
    HyperchainOUIdentifier orderer_ou_identifier = 5;
}
