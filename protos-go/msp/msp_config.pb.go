// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: msp_config.proto

package msp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MSPConfig collects all the configuration information for
// an MSP. The Config field should be unmarshalled in a way
// that depends on the Type
type MSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Config HyperchainMSPConfig 结构体的 protobuf 编码的字节。
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *MSPConfig) Reset() {
	*x = MSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPConfig) ProtoMessage() {}

func (x *MSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPConfig.ProtoReflect.Descriptor instead.
func (*MSPConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{0}
}

func (x *MSPConfig) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

// HyperchainMSPConfig collects all the configuration information for
// a Hyperchain MSP.
// Here we assume a default certificate validation policy, where
// any certificate signed by any of the listed rootCA certs would
// be considered as valid under this MSP.
// This MSP may or may not come with a signing identity. If it does,
// it can also issue signing identities. If it does not, it can only
// be used to validate and verify certificates.
type HyperchainMSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name holds the identifier of the MSP; MSP identifier
	// is chosen by the application that governs this MSP.
	// For example, and assuming the default implementation of MSP,
	// that is X.509-based and considers a single Issuer,
	// this can refer to the Subject OU field or the Issuer OU field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// RootCerts 存储本 msp 信任的 ca 证书的证书列表，存储格式为 ASN.1 DER PEM。
	RootCerts [][]byte `protobuf:"bytes,2,rep,name=root_certs,json=rootCerts,proto3" json:"root_certs,omitempty"`
	// IntermediateCerts 存储该 MSP 信任的中间证书列表；它们在证书验证时的使用方法如下：
	// 验证尝试从待验证证书（位于路径的一端）和根证书字段中的一个证书（位于路径的另一端）
	// 之间建立一条路径。如果路径长于 2，中间的证书将在 IntermediateCerts 池中搜索。
	IntermediateCerts [][]byte `protobuf:"bytes,3,rep,name=intermediate_certs,json=intermediateCerts,proto3" json:"intermediate_certs,omitempty"`
	// Admins 表示该 MSP 的管理员的身份。
	// x509 证书的 ASN.1 DER PEM 格式编码的数据。
	Admins [][]byte `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	// RevocationList 证书撤销列表。
	// x509 证书的 ASN.1 DER 格式编码的数据。
	RevocationList [][]byte `protobuf:"bytes,5,rep,name=revocation_list,json=revocationList,proto3" json:"revocation_list,omitempty"`
	// SigningIdentity holds information on the signing identity
	// this peer is to use, and which is to be imported by the
	// MSP defined before
	SigningIdentity *SigningIdentityInfo `protobuf:"bytes,6,opt,name=signing_identity,json=signingIdentity,proto3" json:"signing_identity,omitempty"`
	// OrganizationalUnitIdentifiers holds one or more
	// hyperchain organizational unit identifiers that belong to
	// this MSP configuration
	OrganizationalUnitIdentifiers []*HyperchainOUIdentifier `protobuf:"bytes,7,rep,name=organizational_unit_identifiers,json=organizationalUnitIdentifiers,proto3" json:"organizational_unit_identifiers,omitempty"`
	// HyperchainCryptoConfig 定义了采用那种哈希算法。
	CryptoConfig *HyperchainCryptoConfig `protobuf:"bytes,8,opt,name=crypto_config,json=cryptoConfig,proto3" json:"crypto_config,omitempty"`
	// TlsRootCerts 该 MSP 信任的 TLS 根证书列表，x509 证书的 ASN.1 DER PEM 格式编码的数据。
	TlsRootCerts [][]byte `protobuf:"bytes,9,rep,name=tls_root_certs,json=tlsRootCerts,proto3" json:"tls_root_certs,omitempty"`
	// TlsIntermediateCerts 该 MSP 信任的 TLS 中级证书列表，x509 证书的 ASN.1 DER PEM 格式编码的数据。
	TlsIntermediateCerts [][]byte `protobuf:"bytes,10,rep,name=tls_intermediate_certs,json=tlsIntermediateCerts,proto3" json:"tls_intermediate_certs,omitempty"`
	// HyperchainNodeOus 包含 peer、admin、client、orderer 四类节点的 organizational unit 的配置信息。
	HyperchainNodeOus *HyperchainNodeOUs `protobuf:"bytes,11,opt,name=hyperchain_node_ous,json=hyperchainNodeOus,proto3" json:"hyperchain_node_ous,omitempty"`
}

func (x *HyperchainMSPConfig) Reset() {
	*x = HyperchainMSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperchainMSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperchainMSPConfig) ProtoMessage() {}

func (x *HyperchainMSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperchainMSPConfig.ProtoReflect.Descriptor instead.
func (*HyperchainMSPConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{1}
}

func (x *HyperchainMSPConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperchainMSPConfig) GetRootCerts() [][]byte {
	if x != nil {
		return x.RootCerts
	}
	return nil
}

func (x *HyperchainMSPConfig) GetIntermediateCerts() [][]byte {
	if x != nil {
		return x.IntermediateCerts
	}
	return nil
}

func (x *HyperchainMSPConfig) GetAdmins() [][]byte {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *HyperchainMSPConfig) GetRevocationList() [][]byte {
	if x != nil {
		return x.RevocationList
	}
	return nil
}

func (x *HyperchainMSPConfig) GetSigningIdentity() *SigningIdentityInfo {
	if x != nil {
		return x.SigningIdentity
	}
	return nil
}

func (x *HyperchainMSPConfig) GetOrganizationalUnitIdentifiers() []*HyperchainOUIdentifier {
	if x != nil {
		return x.OrganizationalUnitIdentifiers
	}
	return nil
}

func (x *HyperchainMSPConfig) GetCryptoConfig() *HyperchainCryptoConfig {
	if x != nil {
		return x.CryptoConfig
	}
	return nil
}

func (x *HyperchainMSPConfig) GetTlsRootCerts() [][]byte {
	if x != nil {
		return x.TlsRootCerts
	}
	return nil
}

func (x *HyperchainMSPConfig) GetTlsIntermediateCerts() [][]byte {
	if x != nil {
		return x.TlsIntermediateCerts
	}
	return nil
}

func (x *HyperchainMSPConfig) GetHyperchainNodeOus() *HyperchainNodeOUs {
	if x != nil {
		return x.HyperchainNodeOus
	}
	return nil
}

// HyperchainCryptoConfig contains configuration parameters
// for the cryptographic algorithms used by the MSP
// this configuration refers to
type HyperchainCryptoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HashAlgorithm 定义了哈希算法，目前仅支持 SHA256 哈希算法。
	// 用于计算签名 (signature) 和身份标识符 (identity identifier) 时使用。
	HashAlgorithm string `protobuf:"bytes,1,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"`
}

func (x *HyperchainCryptoConfig) Reset() {
	*x = HyperchainCryptoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperchainCryptoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperchainCryptoConfig) ProtoMessage() {}

func (x *HyperchainCryptoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperchainCryptoConfig.ProtoReflect.Descriptor instead.
func (*HyperchainCryptoConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{2}
}

func (x *HyperchainCryptoConfig) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

// IdemixMSPConfig collects all the configuration information for
// an Idemix MSP.
type IdemixMSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name holds the identifier of the MSP
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ipk represents the (serialized) issuer public key
	Ipk []byte `protobuf:"bytes,2,opt,name=ipk,proto3" json:"ipk,omitempty"`
	// signer may contain crypto material to configure a default signer
	Signer *IdemixMSPSignerConfig `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// revocation_pk is the public key used for revocation of credentials
	RevocationPk []byte `protobuf:"bytes,4,opt,name=revocation_pk,json=revocationPk,proto3" json:"revocation_pk,omitempty"`
	// epoch represents the current epoch (time interval) used for revocation
	Epoch int64 `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *IdemixMSPConfig) Reset() {
	*x = IdemixMSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdemixMSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdemixMSPConfig) ProtoMessage() {}

func (x *IdemixMSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdemixMSPConfig.ProtoReflect.Descriptor instead.
func (*IdemixMSPConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{3}
}

func (x *IdemixMSPConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdemixMSPConfig) GetIpk() []byte {
	if x != nil {
		return x.Ipk
	}
	return nil
}

func (x *IdemixMSPConfig) GetSigner() *IdemixMSPSignerConfig {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *IdemixMSPConfig) GetRevocationPk() []byte {
	if x != nil {
		return x.RevocationPk
	}
	return nil
}

func (x *IdemixMSPConfig) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// IdemixMSPSIgnerConfig contains the crypto material to set up an idemix signing identity
type IdemixMSPSignerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cred represents the serialized idemix credential of the default signer
	Cred []byte `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	// sk is the secret key of the default signer, corresponding to credential Cred
	Sk []byte `protobuf:"bytes,2,opt,name=sk,proto3" json:"sk,omitempty"`
	// organizational_unit_identifier defines the organizational unit the default signer is in
	OrganizationalUnitIdentifier string `protobuf:"bytes,3,opt,name=organizational_unit_identifier,json=organizationalUnitIdentifier,proto3" json:"organizational_unit_identifier,omitempty"`
	// role defines whether the default signer is admin, peer, member or client
	Role int32 `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
	// enrollment_id contains the enrollment id of this signer
	EnrollmentId string `protobuf:"bytes,5,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
	// credential_revocation_information contains a serialized CredentialRevocationInformation
	CredentialRevocationInformation []byte `protobuf:"bytes,6,opt,name=credential_revocation_information,json=credentialRevocationInformation,proto3" json:"credential_revocation_information,omitempty"`
}

func (x *IdemixMSPSignerConfig) Reset() {
	*x = IdemixMSPSignerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdemixMSPSignerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdemixMSPSignerConfig) ProtoMessage() {}

func (x *IdemixMSPSignerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdemixMSPSignerConfig.ProtoReflect.Descriptor instead.
func (*IdemixMSPSignerConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{4}
}

func (x *IdemixMSPSignerConfig) GetCred() []byte {
	if x != nil {
		return x.Cred
	}
	return nil
}

func (x *IdemixMSPSignerConfig) GetSk() []byte {
	if x != nil {
		return x.Sk
	}
	return nil
}

func (x *IdemixMSPSignerConfig) GetOrganizationalUnitIdentifier() string {
	if x != nil {
		return x.OrganizationalUnitIdentifier
	}
	return ""
}

func (x *IdemixMSPSignerConfig) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *IdemixMSPSignerConfig) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

func (x *IdemixMSPSignerConfig) GetCredentialRevocationInformation() []byte {
	if x != nil {
		return x.CredentialRevocationInformation
	}
	return nil
}

// SigningIdentityInfo represents the configuration information
// related to the signing identity the peer is to use for generating
// endorsements
type SigningIdentityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PublicSigner x509 证书的 ASN.1 DER PEM 格式编码的数据。
	PublicSigner []byte `protobuf:"bytes,1,opt,name=public_signer,json=publicSigner,proto3" json:"public_signer,omitempty"`
	// PrivateSigner 与 PublicSigner 相对应的私钥信息，当根据 PublicSigner 的公钥的 SKI 在 keystore
	// 中找不到私钥时，就可以利用 PrivateSigner 携带的私钥信息导入私钥到 keystore 中。
	PrivateSigner *KeyInfo `protobuf:"bytes,2,opt,name=private_signer,json=privateSigner,proto3" json:"private_signer,omitempty"`
}

func (x *SigningIdentityInfo) Reset() {
	*x = SigningIdentityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningIdentityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningIdentityInfo) ProtoMessage() {}

func (x *SigningIdentityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningIdentityInfo.ProtoReflect.Descriptor instead.
func (*SigningIdentityInfo) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{5}
}

func (x *SigningIdentityInfo) GetPublicSigner() []byte {
	if x != nil {
		return x.PublicSigner
	}
	return nil
}

func (x *SigningIdentityInfo) GetPrivateSigner() *KeyInfo {
	if x != nil {
		return x.PrivateSigner
	}
	return nil
}

// KeyInfo represents a (secret) key that is either already stored
// in the bccsp/keystore or key material to be imported to the
// bccsp key-store. In later versions it may contain also a
// keystore identifier
type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the key inside the default keystore; this for
	// the case of Software BCCSP as well as the HSM BCCSP would be
	// the SKI of the key
	KeyIdentifier string `protobuf:"bytes,1,opt,name=key_identifier,json=keyIdentifier,proto3" json:"key_identifier,omitempty"`
	// KeyMaterial 密钥的 ASN.1 DER PEM 格式数据。
	KeyMaterial []byte `protobuf:"bytes,2,opt,name=key_material,json=keyMaterial,proto3" json:"key_material,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{6}
}

func (x *KeyInfo) GetKeyIdentifier() string {
	if x != nil {
		return x.KeyIdentifier
	}
	return ""
}

func (x *KeyInfo) GetKeyMaterial() []byte {
	if x != nil {
		return x.KeyMaterial
	}
	return nil
}

// HyperchainOUIdentifier represents an organizational unit and
// its related chain of trust identifier.
type HyperchainOUIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Certificate represents the second certificate in a certification chain.
	// (Notice that the first certificate in a certification chain is supposed
	// to be the certificate of an identity).
	// It must correspond to the certificate of root or intermediate CA
	// recognized by the MSP this message belongs to.
	// Starting from this certificate, a certification chain is computed
	// and bound to the OrganizationUnitIdentifier specified
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// OrganizationUnitIdentifier defines the organizational unit under the
	// MSP identified with MSPIdentifier
	OrganizationalUnitIdentifier string `protobuf:"bytes,2,opt,name=organizational_unit_identifier,json=organizationalUnitIdentifier,proto3" json:"organizational_unit_identifier,omitempty"`
}

func (x *HyperchainOUIdentifier) Reset() {
	*x = HyperchainOUIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperchainOUIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperchainOUIdentifier) ProtoMessage() {}

func (x *HyperchainOUIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperchainOUIdentifier.ProtoReflect.Descriptor instead.
func (*HyperchainOUIdentifier) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{7}
}

func (x *HyperchainOUIdentifier) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *HyperchainOUIdentifier) GetOrganizationalUnitIdentifier() string {
	if x != nil {
		return x.OrganizationalUnitIdentifier
	}
	return ""
}

// HyperchainNodeOUs contains configuration to tell apart clients from peers from orderers
// based on OUs. If NodeOUs recognition is enabled then an msp identity
// that does not contain any of the specified OU will be considered invalid.
type HyperchainNodeOUs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true then an msp identity that does not contain any of the specified OU will be considered invalid.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// OU Identifier of the clients
	ClientOuIdentifier *HyperchainOUIdentifier `protobuf:"bytes,2,opt,name=client_ou_identifier,json=clientOuIdentifier,proto3" json:"client_ou_identifier,omitempty"`
	// OU Identifier of the peers
	PeerOuIdentifier *HyperchainOUIdentifier `protobuf:"bytes,3,opt,name=peer_ou_identifier,json=peerOuIdentifier,proto3" json:"peer_ou_identifier,omitempty"`
	// OU Identifier of the admins
	AdminOuIdentifier *HyperchainOUIdentifier `protobuf:"bytes,4,opt,name=admin_ou_identifier,json=adminOuIdentifier,proto3" json:"admin_ou_identifier,omitempty"`
	// OU Identifier of the orderers
	OrdererOuIdentifier *HyperchainOUIdentifier `protobuf:"bytes,5,opt,name=orderer_ou_identifier,json=ordererOuIdentifier,proto3" json:"orderer_ou_identifier,omitempty"`
}

func (x *HyperchainNodeOUs) Reset() {
	*x = HyperchainNodeOUs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperchainNodeOUs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperchainNodeOUs) ProtoMessage() {}

func (x *HyperchainNodeOUs) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperchainNodeOUs.ProtoReflect.Descriptor instead.
func (*HyperchainNodeOUs) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{8}
}

func (x *HyperchainNodeOUs) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *HyperchainNodeOUs) GetClientOuIdentifier() *HyperchainOUIdentifier {
	if x != nil {
		return x.ClientOuIdentifier
	}
	return nil
}

func (x *HyperchainNodeOUs) GetPeerOuIdentifier() *HyperchainOUIdentifier {
	if x != nil {
		return x.PeerOuIdentifier
	}
	return nil
}

func (x *HyperchainNodeOUs) GetAdminOuIdentifier() *HyperchainOUIdentifier {
	if x != nil {
		return x.AdminOuIdentifier
	}
	return nil
}

func (x *HyperchainNodeOUs) GetOrdererOuIdentifier() *HyperchainOUIdentifier {
	if x != nil {
		return x.OrdererOuIdentifier
	}
	return nil
}

var File_msp_config_proto protoreflect.FileDescriptor

var file_msp_config_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x70, 0x22, 0x23, 0x0a, 0x09, 0x4d, 0x53, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc8, 0x04, 0x0a,
	0x13, 0x48, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x53, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x1f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x6c, 0x73,
	0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6c, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x6c, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12,
	0x46, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6f, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x4f, 0x55, 0x73, 0x52, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65,
	0x6d, 0x69, 0x78, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69,
	0x70, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x4d,
	0x53, 0x50, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x49, 0x64, 0x65, 0x6d, 0x69, 0x78, 0x4d, 0x53, 0x50, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x72, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x73, 0x6b, 0x12,
	0x44, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x21, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x13, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x22, 0x80, 0x01, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0xe3, 0x02, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x55, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x12, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x55, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x4f,
	0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x4f, 0x75, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30, 0x38, 0x31, 0x35,
	0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_msp_config_proto_rawDescOnce sync.Once
	file_msp_config_proto_rawDescData = file_msp_config_proto_rawDesc
)

func file_msp_config_proto_rawDescGZIP() []byte {
	file_msp_config_proto_rawDescOnce.Do(func() {
		file_msp_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_msp_config_proto_rawDescData)
	})
	return file_msp_config_proto_rawDescData
}

var file_msp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_msp_config_proto_goTypes = []interface{}{
	(*MSPConfig)(nil),              // 0: msp.MSPConfig
	(*HyperchainMSPConfig)(nil),    // 1: msp.HyperchainMSPConfig
	(*HyperchainCryptoConfig)(nil), // 2: msp.HyperchainCryptoConfig
	(*IdemixMSPConfig)(nil),        // 3: msp.IdemixMSPConfig
	(*IdemixMSPSignerConfig)(nil),  // 4: msp.IdemixMSPSignerConfig
	(*SigningIdentityInfo)(nil),    // 5: msp.SigningIdentityInfo
	(*KeyInfo)(nil),                // 6: msp.KeyInfo
	(*HyperchainOUIdentifier)(nil), // 7: msp.HyperchainOUIdentifier
	(*HyperchainNodeOUs)(nil),      // 8: msp.HyperchainNodeOUs
}
var file_msp_config_proto_depIdxs = []int32{
	5,  // 0: msp.HyperchainMSPConfig.signing_identity:type_name -> msp.SigningIdentityInfo
	7,  // 1: msp.HyperchainMSPConfig.organizational_unit_identifiers:type_name -> msp.HyperchainOUIdentifier
	2,  // 2: msp.HyperchainMSPConfig.crypto_config:type_name -> msp.HyperchainCryptoConfig
	8,  // 3: msp.HyperchainMSPConfig.hyperchain_node_ous:type_name -> msp.HyperchainNodeOUs
	4,  // 4: msp.IdemixMSPConfig.signer:type_name -> msp.IdemixMSPSignerConfig
	6,  // 5: msp.SigningIdentityInfo.private_signer:type_name -> msp.KeyInfo
	7,  // 6: msp.HyperchainNodeOUs.client_ou_identifier:type_name -> msp.HyperchainOUIdentifier
	7,  // 7: msp.HyperchainNodeOUs.peer_ou_identifier:type_name -> msp.HyperchainOUIdentifier
	7,  // 8: msp.HyperchainNodeOUs.admin_ou_identifier:type_name -> msp.HyperchainOUIdentifier
	7,  // 9: msp.HyperchainNodeOUs.orderer_ou_identifier:type_name -> msp.HyperchainOUIdentifier
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_msp_config_proto_init() }
func file_msp_config_proto_init() {
	if File_msp_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msp_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperchainMSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperchainCryptoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdemixMSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdemixMSPSignerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningIdentityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperchainOUIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperchainNodeOUs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msp_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msp_config_proto_goTypes,
		DependencyIndexes: file_msp_config_proto_depIdxs,
		MessageInfos:      file_msp_config_proto_msgTypes,
	}.Build()
	File_msp_config_proto = out.File
	file_msp_config_proto_rawDesc = nil
	file_msp_config_proto_goTypes = nil
	file_msp_config_proto_depIdxs = nil
}
